package com.keke.notebook.c2018;

import java.util.Scanner;

/**
 * Created by KEKE on 2019/6/12
 * 字节跳动
 * 手串
 * 作为一个手串艺人，有金主向你订购了一条包含n个杂色串珠的手串——每个串珠要么无色，要么涂了若干种颜色。
 * 为了使手串的色彩看起来不那么单调，金主要求，手串上的任意一种颜色（不包含无色），在任意连续的m个串珠里至多出现一次（注意这里手串是一个环形）。
 * 手串上的颜色一共有c种。现在按顺时针序告诉你n个串珠的手串上，每个串珠用所包含的颜色分别有哪些。请你判断该手串上有多少种颜色不符合要求。
 * 即询问有多少种颜色在任意连续m个串珠中出现了至少两次。
 *
 * 测试用例：
 * 1000 100 50 50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 0 0 0 1 29 0 0 0 1 43 0 0 0 0 0 0 0 0 0 0 0 1 14 1 43 0 0 0 1 31 1 31 1 29 0 0 0 0 0 1 15 0 0 0 0 0 0 0 0 1 1 0 1 4 0 0 0 0 0 1 39 0 0 0 0 1 29 0 1 24 0 0 0 0 0 0 0 0 1 39 0 1 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 31 0 0 0 0 0 0 0 1 6 0 0 0 0 0 50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 1 15 0 0 0 0 0 0 1 24 0 0 1 26 0 1 14 1 28 0 0 1 34 0 0 0 0 0 0 0 0 1 1 0 0 1 14 1 7 0 1 17 2 25 47 1 16 0 1 15 1 31 0 0 0 0 0 0 0 0 0 0 1 4 0 0 0 0 0 0 1 14 1 24 0 0 0 0 0 0 0 1 26 1 9 0 0 0 0 0 0 0 0 0 0 0 2 28 29 0 0 0 0 0 0 1 26 1 28 1 16 0 0 0 0 1 4 0 0 0 0 0 0 0 0 50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 0 0 0 2 14 43 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 25 0 1 34 0 0 0 1 17 0 0 0 0 0 0 1 47 0 0 0 0 0 0 1 15 0 0 0 0 0 0 0 1 43 0 0 0 0 0 0 0 0 1 47 0 0 0 1 32 0 0 0 0 0 0 0 0 1 26 0 0 1 32 0 0 0 1 47 1 15 0 0 1 25 0 1 47 0 0 0 0 0 0 0 0 1 29 0 0 2 7 15 50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 34 0 0 0 0 0 0 0 0 0 0 0 0 0 1 27 0 0 0 1 17 0 0 0 0 0 0 0 1 24 0 0 0 0 0 0 0 1 24 0 0 2 26 47 0 0 0 1 6 0 1 24 1 29 1 34 0 0 0 0 0 0 0 0 0 0 0 0 0 1 31 0 0 0 0 0 0 0 1 39 0 1 31 0 0 1 6 0 0 0 0 50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 0 0 0 0 0 0 0 0 0 0 1 27 0 1 39 0 0 0 0 1 6 0 0 0 1 9 0 0 1 16 1 27 0 0 0 1 43 1 31 2 1 25 0 0 0 0 0 0 0 0 0 0 0 0 1 47 0 1 25 0 0 1 25 0 0 0 0 0 1 29 0 0 1 6 0 0 0 1 34 0 0 0 0 1 39 1 9 0 0 0 0 0 0 0 0 1 31 0 1 9 1 26 1 17 0 0 0 0 1 9 2 1 32 1 32 0 0 0 0 0 0 0 0 1 32 0 50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 0 0 0 0 0 1 17 0 2 14 39 0 0 0 0 0 0 0 0 1 28 0 0 0 0 0 0 0 0 0 0 0 2 16 43 0 0 0 0 0 0 0 1 7 0 0 0 0 1 27 1 6 0 0 0 0 0 0 0 0 0 0 0 0 1 17 0 0 1 28 0 0 0 0 0 0 0 0 0 0 0 1 47 0 0 1 7 0 0 0 0 0 2 28 47 1 7 0 1 43 0 0 0 0 1 4 0 0 0 0 0 1 43 0 1 24 0 0 0 50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 2 4 27 0 1 27 1 39 0 1 24 0 0 1 32 0 1 1 0 1 34 0 1 1 1 16 0 0 0 0 0 0 0 0 0 1 7 0 0 0 0 0 0 0 0 0 0 0 1 9 0 0 0 0 0 0 0 1 32 2 6 29 0 0 0 0 1 28 1 16 0 0 2 15 26 0 0 0 0 0 0 0 0 0 0 0 1 6 0 1 4 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 24 0 0 1 16 0 0 0 0 0 0 1 15 0 0 0 0 0 50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 0 0 0 0 1 1 0 1 31 0 0 0 1 28 0 1 34 1 25 0 0 0 0 0 1 4 0 0 0 0 0 0 0 0 0 0 0 0 1 15 0 0 0 1 6 0 1 31 0 0 0 1 28 0 0 0 0 0 0 0 1 16 0 0 0 0 0 0 0 1 14 1 14 0 0 0 0 0 1 9 0 0 0 0 0 1 34 0 2 7 15 0 1 7 0 0 0 0 0 0 0 1 43 0 0 0 0 0 1 43 0 0 0 0 0 0 0 0 1 4 50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 0 0 1 27 0 1 6 0 0 0 0 0 0 0 0 0 1 27 1 16 0 0 1 17 0 0 1 25 0 0 0 0 0 0 0 1 17 1 39 0 0 0 0 0 0 0 1 27 0 0 1 34 0 0 1 4 0 1 1 0 0 1 29 1 28 0 0 0 1 32 0 0 0 0 0 0 1 7 0 0 0 0 0 1 26 0 0 1 9 0 0 1 27 0 1 34 0 0 1 17 0 0 0 0 0 0 0 0 0 0 0 1 29 0 0 0 0 0 1 47 0 0 50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 0 0 0 0 1 16 0 0 0 1 26 0 1 17 1 39 0 1 14 0 0 0 0 0 0 0 0 0 0 0 0 0 1 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 25 39 1 32 2 7 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 25 0 0 0 0 0 0 0 1 9 0 0 0 0 0 0 0 0 0 0 1 9 0 0
 * 21
 */
public class Code_044 {

    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        while (in.hasNext()){
            int n = in.nextInt();
            int m = in.nextInt();
            int c = in.nextInt();
            if(m==1){
                System.out.println(0);
                return;
            }
            boolean[] badColor = new boolean[c+1];
            int[] firstPosition = new int[c+1];
            int[] lastPosition = new int[c+1];
            for(int i=0;i<=c;i++){
                firstPosition[i] = Integer.MIN_VALUE;
                lastPosition[i] = Integer.MIN_VALUE;
            }
            for(int i=0;i<n;i++){
                int num_i = in.nextInt();
                for(int j=0;j<num_i;j++){
                    int color = in.nextInt();
                    if(firstPosition[color]==Integer.MIN_VALUE){
                        firstPosition[color] = i;
                    }
                    if(i-m+1<=lastPosition[color]){
                        badColor[color] = true;
                    }
                    if(i+m-1>=n&&firstPosition[color]<=(i+m-1)%n){
                        badColor[color] = true;
                    }
                    lastPosition[color] = i;
                }
            }
            int count = 0;
            for(int i=0;i<=c;i++){
                if(badColor[i]==true){
                    count++;
                }
            }
            System.out.println(count);
        }
    }
}
